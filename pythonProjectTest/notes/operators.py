# переменные, ввод/вывод данных
key = 'value'  # задание переменной
keys, values = 'value_1', 'value_2'  # множественное присваивание
name = input()  # запрос на ввод данных
print()  # вывод данных в консоль

# тип данных, идентификатор элемента
print(id(name))  # вывод идентификатора любого элемента
print(type(name))  # определение типа данных

# исключения
while True:  # задание бесконечного цикла
    try:
        x = int(input("Введите число x: "))
    except ValueError:  # обработка ошибки "тип данных"
        print("x не число; повторите ввод.")
        pass  # пишется, если требуется проигнорировать исключение
    else:
        break  # выход из цикла
print(f"{x} есть число.")

# операции с числами
print(1 // 3)  # целочисленное деление
print(10 % 3)  # определение остатка от деления
print(10 ** 2)  # возведение в степень
num = 3.12345678e+70  # запись длинного числа (дробное число * е (= 10) в степени 70)
print(float(1))  # запись числа в дробном виде
print(int(2.5))  # запись числа без дробной части
print(round(3 + 2.57, 3))  # округление числа до (3) знаков после запятой
abs(-5)  # модуль числа
divmod(5, 10)  # функция возвращает кортеж (a // b, a % b)
pow(5, 10)  # функция возводит 5 в 10 степень

# операции со строками
python = 'language'
print(python[0])  # вывод первого символа строки (задана переменной)
print(python[2:])  # вывод символов заданной переменной от 2 включительно до последнего
print(python[:3])  # вывод символов заданной переменной от 2 включительно до первого
print(python[::2])  # вывод всех символов с шагом 2
print(python[::-1])  # переворот строки
print(len(python))  # подсчет длины строки
print('th' in 'python')  # определение вхождения подстроки в строку
print(python.find('y'))  # вывод номера искомого элемента
print(python.isdigit())  # состоит ли строка из цифр?
print(python.isalpha())  # состоит ли строка из букв?
print(python.isalnum())  # состоит ли строка из букв и цифр?
print(python.upper())  # вывод в нижнем регистре
print(python.lower())  # вывод в верхнем регистре
print(python.title())  # вывод первой буквы каждого слова в верхнем регистре
colors = 'red blue green'
colors_split = colors.split()  # разделение строки и запись элементами в список
colors.joined = ' and '.join(colors_split)  # объединение в строку с разделителем ' and '
print(path.split('/'))  # вывод строки списком по разделителю '/'
inp = int(input())  # ввод целочисленных значений
print(str(age))  # вывод значения строкой
my_age = "I'm %d years old" % (age)  # форматирование строки - на место %d встанет аргумент age (числом)
day, month, year = 14, 2, 2012
print("%d.%02d.%d" % (day, month, year))
print("%d-%02d-%d" % (year, month, day))
print("%d/%d/%d" % (year, day, month))  # форматирование строк даты
text = text.replace(" ", "")  # удаление пробелов в тексте
text = text.replace("\n", "")  # удаление переносов строк в тексте
word = "1, 2, 3"
eval(word.replace(',', '*'))  # динамическое вычисление в строковой записи - замена запятой и вычисление значения
list(python)  # функция преобразует строку в список (побуквенно)
tuple(python)  # функция преобразует строку в кортеж (побуквенно)
ruby = ''.join('r', 'u', 'b', 'y')  # преобразует последовательность в строку и сшивает по разделителю '' (без пробела)

# списки
letters = ['a', 'b', 'c', 'd', 'e']  # задание списка
letters.append('g')  # добавление элемента в конец
print(letters[0])  # вывод самого первого элемента
print(letters[-1])  # вывод самого последнего элемента
print(letters[-2])  # вывод предпоследнего элемента
print(len(letters))  # подсчет числа элементов
letters.insert(1, 'b2')  # добавление элемента b2 на произвольную позицию в списке
letters.pop()  # удаление последнего элемента (или любого другого)
print(letters[1:4:2])  # вывод с 1 по 4 элемент с шагом 2
print(list(map(round, numbers)))  # применение функции округления ко всем элементам и вывод результата
list_of_strings = string.split()  # представление введенных чисел в список со строками
list_of_numbers = list(map(int, list_of_strings))  # представление списка со строками в список с числами
range_list = range(len(list))  # присваивает элементам списка (числам) индексы и выстраивает их по возрастанию значений
list_squares = [i ** 2 for i in range(1, 11) if i % 2 == 1]
# генерация списка - [квадрат числа, для чисел в диапазоне 1 - 11, если число - нечетное]
list_tuples = [(i, i ** 2) for i in range(1, 11)]
# генерация списка - [(число, квадрат числа), для чисел в диапазоне 1 - 11]
M = [[i + j for j in range(5)] for i in range(5)]  # генерация матрицы 5х5
L = [int(input()) % 2 == 0 for i in range(5)]  # ввод данных и сохранение в список четных как True и нечетных как False
for a, b in zip(L, M):
    print('a =', a, 'b =', b)  # объединение списков L и M в кортежи (a, b)

# словари
student = {'name': 'Ivan', 'surname': 'Petrov', 'age': 25}  # задание словаря
student['phone'] = '8(800)555-35-35'  # добавление элемента по ключу
print(student.keys())  # вывод ключей списком
print(student.values())  # вывод значений списком
student.pop('phone')  # удаление элемента по ключу

# множества
a = {'a', 'b', 'c', 'd'}  # задание множества - уникальные элементы (без повторов)
b = [1, 1, 2, 3, 2]
c = list(set(b))  # создание множества из списка и преобразование в список

# логические операторы
print('5' in str(123456))  # определение вхождения числа в последовательность
print('3' in str(N) and '7' in str(N))  # определение вхождения 3 И 5 в последовательность
print(list(range(1, 10, 2)))  # создание списка с последовательностью чисел и шагом - 1, 3, 5, 7, 9
list = [-5, 2, 4, 8, 12, -7, 5]
for i, value in enumerate(list):  # возвращение данных в виде кортежей (индекс, значение элемента)
    print("Индекс элемента: ", i)
    print("Значение элемента: ", value)
if all([])  # вывод True, если все условия в списке истинные
    if any([])  # вывод True, если хотя бы одно условие истинное
    numbers = list(map(int, input().split()))  # создание списка из целых введенных чисел
print(not any(numbers))  # поиск 0 - вывод False, если аргумент - True


# декораторы
def my_decorator(
        a_function_to_decorate):  # определение функции-обертки для выполнения каждый раз при вызове оригинальной
    def wrapper():
        print("Я буду выполнен до основного вызова!")  # код до вызова оригинальной функции (a_function_to_decorate)
        result = a_function_to_decorate()  # возврат значения оригинальной функции
        print("Я буду выполнен после основного вызова!")  # код, выполняемый после вызова оригинальной функции
        return result

    return wrapper


def my_function():  # определение оригинальной функции
    print("Я - оборачиваемая функция!")
    return 0


decorated_function = my_decorator(my_function)  # декорирование функции
print(decorated_function())


@my_decorator  # короткая запись; аргумент декоратора - оригинальная функция
def my_function(number):
    print("Что надо сделать со мной?")


# лямбда-функция - содержит одну инструкцию, анонимны, применяются с map или filter
number = list(map(lambda x: x ** 2, range(1, 11)))  # возвести в квадрат числа последовательности
